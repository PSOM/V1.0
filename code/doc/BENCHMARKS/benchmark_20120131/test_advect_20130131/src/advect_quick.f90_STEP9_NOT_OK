subroutine advecn(m,n,dtimel,step) 
!     ---------------------------------------------                     
USE header
!     convecn(m,n,dtime) means use level m and write s,T to level n     
!     computes Cx,Cy,Cz at the cell centers.                            
!     uflx,vflx,wflx,sflx,Tflx are the fluxes defined at                
!     cell faces (using QUICK).                                         
!                                                                       
integer i,i2,j,k,n,m,step
!     ntr is the number of tracers in variable T (Defined in header.f)  
REAL(kind=rc_kind) :: Eighth,Half,absvel,left,right,ctr,upos,uneg 
REAL(kind=rc_kind) :: dtimel,dtJ
REAL(kind=rc_kind) :: varflx(0:NI,0:NJ,0:NK), uvarx(0:NI+1,0:NJ+1,0:NK+1), vardif(NI,NJ,NK)                            
REAL(kind=rc_kind) :: dvarx(0:NI+1),dvary(0:NJ),dvarz(0:NK+1) 
REAL(kind=rc_kind), dimension(    0:NI+1,0:NJ+1, 0:NK+1)  :: uTx, usx, uux, uvx, uwx
REAL(kind=rc_kind), dimension(ntr,0:NI+1,0:NJ+1, 0:NK+1)  :: uTrx

REAL(kind=rc_kind) :: Tdif(NI,NJ,NK), sdif(NI,NJ,NK),Trdif(ntr,NI,NJ,NK),udif(NI,NJ,NK), vdif(NI,NJ,NK),wdif(NI,NJ,NK)
REAL(kind=rc_kind) :: s_restore(0:NJ+1),alph_restore(0:NJ+1) 
REAL(kind=rc_kind) :: courinv,fc 
                
REAL(kind=rc_kind), dimension(    0:NI+1,0:NJ+1, 0:NK+1) :: var                            
parameter (Eighth=0.125d0, Half=0.5, courinv=2.d0) 

integer :: selvar


do selvar=1,5+ntr
  if(selvar==1) var=T(:,:,:,m)
  if(selvar==2) var=s(:,:,:,m)
  if(selvar==3) var=u(:,:,:,m)
  if(selvar==4) var=v(:,:,:,m)
  if(selvar==5) var=w(:,:,:,m)
  do it=1,ntr
    if(selvar==5+it) var=Tr(it,:,:,:,m)
  enddo

                                                                    
  do k=1,NK 
    do j=1,NJ 

      dvarx(0)=var(1,j,k)-var(NI,j,k)
      do i=1,NI-1 
        dvarx(i)= var(i+1,j,k) - var(i,j,k) 
      end do 
      dvarx(NI)=dvarx(0); dvarx(NI+1)=dvarx(1);

      var(NI+1,j,k)= var(1,j,k); var(0,j,k)= var(NI,j,k); 
       
      do i=1,NI
        if (uf(i,j,k).gt.0.d0) then 
          left= Eighth*(dvarx(i) -dvarx(i-1)); ctr= Half* (var(i+1,j,k) +var(i,j,k)); fc= ctr -left; 
          call ultim(var(i-1,j,k),var(i,j,k),var(i+1,j,k),dvarx(i),dvarx(i-1),courinv,fc)         
          varflx(i,j,k)= uf(i,j,k)*fc 
         else 
          if(i==NI) then                  
            i2=0;
           else
            i2=i;
          endif
          right= Eighth*(dvarx(i2+1) -dvarx(i2)); ctr= Half* (var(i2+1,j,k) +var(i,j,k)); fc= ctr - right; 
          call ultim(var(i2+2,j,k),var(i2+1,j,k),var(i,j,k),dvarx(i),dvarx(i2+1),courinv,fc)           
          varflx(i,j,k)= uf(i,j,k)*fc 
        end if 
      end do
      varflx(0,j,k)= varflx(NI,j,k) 
    end do 
  end do 

  do k=1,NK 
    do j=1,NJ 
      do i=1,NI 
        uvarx(i,j,k)=varflx(i,j,k) -varflx(i-1,j,k) 
      end do 
    end do 
  end do 

                                                       
  !     y-direction                                                       
  !     ----------- 
                                                                     
  do k=1,NK 
    do i=1,NI 

      dvary(0)= 0.d0; !     dvary at faces...                                          
      do j=1,NJ-1 
        dvary(j)= var(i,j+1,k) - var(i,j,k) 
      end do  
      dvary(NJ)= 0.d0;

      var(i,0,k)= var(i,1,k); var(i,NJ+1,k)= var(i,NJ,k);
 
      do j=1,NJ-1 
        if (vf(i,j,k).ge.0.d0) then 
         left= Eighth*(dvary(j) -dvary(j-1)); ctr= Half* (var(i,j+1,k) +var(i,j,k)); fc= ctr -left; 
         call ultim(var(i,j-1,k),var(i,j,k),var(i,j+1,k),dvary(j),dvary(j-1),courinv,fc)         
         varflx(i,j,k)= vf(i,j,k)*fc 
        else 
         right= Eighth*(dvary(j+1) -dvary(j)); ctr= Half* (var(i,j+1,k) +var(i,j,k)); fc= ctr - right; 
         call ultim(var(i,j+2,k),var(i,j+1,k),var(i,j,k),dvary(j),dvary(j+1),courinv,fc)           
         varflx(i,j,k)= vf(i,j,k)*fc 
       end if 
     end do 
     varflx(i,0,k)= 0.d0;varflx(i,NJ,k)= 0.d0;
    end do 
  end do 
                                                                        
  do k=1,NK 
    do i=1,NI 
      do j=1,NJ 
        uvarx(i,j,k)= (varflx(i,j,k) -varflx(i,j-1,k) ) + uvarx(i,j,k) 
       end do 
     end do 
  end do 
            

!     z-direction                                                       
!     -----------                                                       
  do j=1,NJ 
    do i=1,NI 

      dvarz(0)= 0.d0 !     dvarz at faces...                                          
      do k=1,NK-1 
         dvarz(k)= var(i,j,k+1) - var(i,j,k) 
      end do 
      dvarz(NK:NK+1)= 0.d0   ! top boundary - Zero gradient                                      
      var(i,j,0)= var(i,j,1); var(i,j,NK+1)= var(i,j,NK) 
                                                                  
      do k=1,NK 
        if (wf(i,j,k).ge.0.d0) then 
          left= Eighth*(dvarz(k) -dvarz(k-1)) 
          ctr= Half* (var(i,j,k+1) +var(i,j,k)) 
          fc= ctr -left 
          call ultim(var(i,j,k-1),var(i,j,k),var(i,j,k+1),dvarz(k),dvarz(k-1),courinv,fc)         
          varflx(i,j,k)= wf(i,j,k)*fc 
         else 
          if (k.eq.NK) then 
             varflx(i,j,k)= wf(i,j,k)*Half*(var(i,j,k+1) +var(i,j,k))                    
             goto 209 
          endif 
          right= Eighth*(dvarz(k+1) -dvarz(k)) 
          ctr= Half* (var(i,j,k+1) +var(i,j,k)) 
          fc= ctr - right 
          call ultim(var(i,j,k+2),var(i,j,k+1),var(i,j,k),dvarz(k),dvarz(k+1),courinv,fc)           
          varflx(i,j,k)= wf(i,j,k)*fc 
        end if 
 209  end do 
      !     Solid Boundary                                                    
      k=0 
      varflx(i,j,k)= 0.d0 
    end do 
  end do 

  do k=1,NK 
    do j=1,NJ 
      do i=1,NI 
        uvarx(i,j,k)= uvarx(i,j,k) + (varflx(i,j,k) -varflx(i,j,k-1) )  
      enddo 
    enddo 
  enddo 

      
!  SELECT CASE(selvar)
!   CASE(1,2,3,4)
!     call viscous(var,vardif); uvarx(1:NI,1:NJ,1:NK)=uvarx(1:NI,1:NJ,1:NK)-vardif(1:NI,1:NJ,1:NK) 
!  END SELECT


  if(selvar==1) uTx(:,:,:)=uvarx(:,:,:)
  if(selvar==2) usx(:,:,:)=uvarx(:,:,:)
  if(selvar==3) uux(:,:,:)=uvarx(:,:,:)
  if(selvar==4) uvx(:,:,:)=uvarx(:,:,:)
  if(selvar==5) uwx(:,:,:)=uvarx(:,:,:)

  do it=1,ntr
    if(selvar==5+it) uTrx(it,:,:,:)=uvarx(:,:,:)

  enddo


enddo !selvar
 


udif=0;vdif=0;wdif=0;sdif=0;Tdif=0;Trdif=0;
call viscous(udif,vdif,wdif,sdif,Tdif,Trdif,m) 

!call viscous(u(:,:,:,m),udif); uux(1:NI,1:NJ,1:NK)=uux(1:NI,1:NJ,1:NK)-udif(1:NI,1:NJ,1:NK)
!call viscous(v(:,:,:,m),vdif); uvx(1:NI,1:NJ,1:NK)=uvx(1:NI,1:NJ,1:NK)-vdif(1:NI,1:NJ,1:NK)
!call viscous(w(:,:,:,m),wdif); uwx(1:NI,1:NJ,1:NK)=uwx(1:NI,1:NJ,1:NK)-wdif(1:NI,1:NJ,1:NK)
!call viscous(s(:,:,:,m),sdif); usx(1:NI,1:NJ,1:NK)=usx(1:NI,1:NJ,1:NK)-sdif(1:NI,1:NJ,1:NK)
!call viscous(T(:,:,:,m),Tdif); uTx(1:NI,1:NJ,1:NK)=uTx(1:NI,1:NJ,1:NK)-Tdif(1:NI,1:NJ,1:NK)







call diffusion(sdif,Tdif,Trdif,udif,vdif,m,step) !modified by amala, add Tr in

do k=1,NK 
  do j=1,NJ 
    do i=1,NI 
      uux(i,j,k)= uux(i,j,k) - udif(i,j,k)                                       
      uvx(i,j,k)= uvx(i,j,k) - vdif(i,j,k)     
      uwx(i,j,k)= uwx(i,j,k)! - wdif(i,j,k)    
      usx(i,j,k)= usx(i,j,k) - sdif(i,j,k)     
      uTx(i,j,k)= uTx(i,j,k) - Tdif(i,j,k)                                       
      rhoadv(i,j,k)= (usx(i,j,k) +sdif(i,j,k))/Jac(i,j,k) 
      do it=1,ntr 
         uTrx(it,i,j,k)= uTrx(it,i,j,k)                        
      end do 
    end do 
  end do 
end do 

do j=1,NJ 
  do i=1,NI 
    do k=1,NK 
      dtJ= dtimel/Jac(i,j,k) 
      cx(i,j,k)= u(i,j,k,0) -dtJ*uux(i,j,k) 
      cy(i,j,k)= v(i,j,k,0) -dtJ*uvx(i,j,k) 
      cz(i,j,k)= w(i,j,k,0) -dtJ*uwx(i,j,k) 
      s(i,j,k,n)= s(i,j,k,0) -dtJ*usx(i,j,k) 
      T(i,j,k,n)= T(i,j,k,0) -dtJ*uTx(i,j,k) 
      do it=1,ntr 
        Tr(it,i,j,k,n)= Tr(it,i,j,k,0) -dtJ*uTrx(it,i,j,k) 
      end do 
    end do 
  end do 
end do 

return 
                                                                        
END                                           
                                                                        
                                                                        
      subroutine ultim(up,ct,dn,gdn,gup,courinv,fc) 
!     ----------------------------------------------                    
!     Implementation of the ULTIMATE limiter based on upstrm,dnstrm,ctr 
!     points and d(phi)/dx at the up- and dnstrm locations              
!     Returns the "ulitimate limited" face value of the variable        
!     that should be multiplied by uf,vf or wf to give the flux.        
       use header, only : rc_kind
                                                                        
      REAL(kind=rc_kind) :: up,ct,dn,gup,gdn,courinv,fc,ref,del,adel,acurv 
                                                                        
      del= dn -up 
      adel= abs(del) 
      acurv= abs(gdn -gup) 
      if (acurv.ge.adel)  then 
         fc= ct 
         return 
      else 
         ref= up + (ct -up)*courinv 
         if (del.gt.0) then 
            fc= max(ct,fc) 
            ref= min(ref,dn) 
            fc= min(fc,ref) 
         else 
            fc= min(ct,fc) 
            ref= max(ref,dn) 
            fc= max(ref,fc) 
         endif 
      end if 
      return 
      END                                           
